<project name="beamer" default="build" basedir=".">
    <description>Build process definition for a beamer presentation.</description>

    <!-- Load properties file -->
    <property file="build.properties"/>

    <!-- Set paths using in build process -->
    <property name="build" location="build" />

    <!-- Set cache paths -->
    <property name="beamer.cache" location="${beamer.cache}" />
    <property name="handout.cache" location="${handout.cache}" />
    <property name="article.cache" location="${article.cache}" />

    <!-- Set source files -->
    <!-- TODO make configurable -->
    <property name="presentation" value="presentation.tex" />

    <!-- Macros -->

    <!-- Compiles a document using pdflatex compiler -->
    <macrodef name="compilepdf">
        <attribute name="dir" />
        <attribute name="document" />
        <attribute name="version" default="beamer" />
        <attribute name="locale" default="" />
        <attribute name="draft" default="false" />

        <sequential>
            <!-- Parse locale argument -->
            <local name="localearg"/>
            <condition property="localearg" value="\providecommand\locale{@{locale}}" else="">
                <not>
                    <equals arg1="@{locale}" arg2="" />
                </not>
            </condition>

            <!-- Parse draft argument -->
            <local name="draftarg"/>
            <condition property="draftarg" value="-draftmode" else="">
                <equals arg1="@{draft}" arg2="true" />
            </condition>

            <!-- Compile document using pdflatex -->
            <!-- TODO redirect pipe and filter by errors and warnings -->
            <!-- failonerror="true" -->
            <exec executable="pdflatex" dir="@{dir}">
                <arg value="-shell-escape" />
                <arg value="-interaction=nonstopmode" />
                <!-- <arg value="-no-parse-first-line" /> -->
                <!-- <arg value="-interaction=batchmode" /> -->
                <arg value="${draftarg}" />
                <arg value="-jobname=@{version}" />
                <!-- TODO currently does not work with caching -->
                <arg value="&quot;\newcommand{\preinput}{${localearg}\documentclass[handout]{beamer}\renewcommand{\documentclass}[2][]{}}\preinput\input{@{document}}&quot;"/>

                <!-- \tikzset{external/system call={pdflatex \tikzexternalcheckshellescape -halt-on-error -interaction=batchmode -jobname &quot;\image&quot; &quot;\texsource&quot;} -->
            </exec>
        </sequential>
    </macrodef>

    <!-- Targets -->

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp />

        <!-- Verify existence of cache directories -->
        <mkdir dir="${beamer.cache}"/>
        <mkdir dir="${handout.cache}"/>
        <mkdir dir="${article.cache}"/>
    </target>

    <target name="build">
        <!-- TODO propperty for enabling/disabling beamer,handout or article -->
        <antcall target="build-beamer" />
        <!-- TODO further calls -->
    </target>

    <target name="build-beamer" depends="init" description="compile the beamer version of the presentation">
        <compilepdf document="${presentation.source}" dir="${basedir}" />

        <!-- Compile beamer version of presentation using pdfLaTeX -->
        <!-- TODO create macro for this -->
        <!-- <exec executable="pdflatex" failonerror="true"> -->
            <!-- <arg line="/c "/> -->
            <!-- <arg value="-shell-escape" /> -->
            <!-- <arg value="-interaction=nonstopmode" /> -->
            <!-- <arg value="${presentation}"/> -->
            <!-- TODO this does not work with caching -->
            <!-- SOLUTION use [-no]-parse-first-line option when compiling with external document class -->
            <!-- also set this for tikz externalize call? is it required or set automatically? -->
            <!-- <arg value="&quot;\documentclass{beamer}\input{${presentation}}&quot;"/> -->
        <!-- </exec> -->

        <!-- Move resulting PDF to build directory -->
        <!-- <move file="presentation.pdf" tofile="${build}/beamer.pdf"/> -->
    </target>

    <target name="draft-beamer" depends="init">
        <!-- TODO only a single run without moving to build -->
    </target>

    <target name="build-handout" depends="init" description="compile the handout version of the presentation">
        <!-- TODO full run if labels have changes (scan output!) -->
        <compilepdf document="${presentation.source}" dir="${basedir}" version="handout" />

        <!-- Compile handout version of presentation using pdfLaTeX -->
        <!-- <exec executable="pdflatex" failonerror="true">
            <arg line="/c "/>
            <arg value="-shell-escape" />
            <arg value="-synctex=1" />
            <arg value="-interaction=nonstopmode" />
            <arg value="&quot;\documentclass[handout]{beamer}\input{${presentation}}&quot;"/>
        </exec> -->

        <!-- Move resulting PDF to build directory -->
        <!-- <move file="presentation.pdf" tofile="${build}/handout.pdf"/> -->
    </target>

    <target name="draft-handout" depends="init">
        <!-- TODO only a single run without moving to build -->
    </target>

    <target name="build-article" depends="init" description="compile the article version of the presentation">
        <!-- TODO -->
    </target>

    <target name="draft-article" depends="init">
        <!-- TODO only a single run without moving to build -->
    </target>

    <target name="clean" depends="init" description="clean up">
        <!-- Delete all files created during the LaTeX build process -->
        <delete>
            <fileset dir="${basedir}" includes="*.aux,*.auxlock,*.gz,*.log,*.nav,*.out,*.pdf,*.snm,*.toc"/>
        </delete>
    </target>

    <target name="clean-cache" depends="init">
        <delete>
            <fileset dir="${beamer.cache}" includes="*" />
            <fileset dir="${handout.cache}" includes="*" />
            <fileset dir="${article.cache}" includes="*" />
        </delete>
    </target>
</project>