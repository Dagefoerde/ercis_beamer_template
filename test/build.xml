<project name="beamer" default="build" basedir=".">
    <description>Build process definition for a beamer presentation.</description>

    <!-- Load properties file -->
    <property file="build.properties"/>

    <!-- Set paths using in build process -->
    <property name="build" location="build" />

    <!-- Set cache paths -->
    <property name="beamer.cache" location="${beamer.cache}" />
    <property name="handout.cache" location="${handout.cache}" />
    <property name="article.cache" location="${article.cache}" />

    <!-- Set source files -->
    <!-- TODO make configurable -->
    <property name="presentation" value="presentation.tex" />

    <!-- Macros -->

    <!-- Compiles a document using pdflatex compiler -->
    <macrodef name="compilepdf">
        <attribute name="dir" />
        <attribute name="document" />
        <attribute name="outputdir" default="build" />
        <attribute name="version" default="beamer" />
        <attribute name="locale" default="" />
        <attribute name="draft" default="false" />

        <sequential>
            <!-- Provide document class -->
            <local name="documentclass"/>
            <!-- <condition property="documentclass" value="\documentclass{beamer}" else="">
                <equals arg1="@{version}" arg2="beamer" />
            </condition> -->
            <condition property="documentclass" value="\documentclass[handout]{beamer}" else="\documentclass{beamer}">
                <equals arg1="@{version}" arg2="handout" />
            </condition>

            <!-- Provide locale command -->
            <local name="localecmd"/>
            <condition property="localecmd" value="\newcommand\locale{@{locale}}" else="">
                <not>
                    <equals arg1="@{locale}" arg2="" />
                </not>
            </condition>

            <!-- Provide draft argument -->
            <local name="draftarg"/>
            <condition property="draftarg" value="-draftmode" else="">
                <equals arg1="@{draft}" arg2="true" />
            </condition>

            <!-- Compile document using pdflatex -->
            <!-- TODO redirect pipe and filter by errors and warnings -->
            <!-- failonerror="true" -->
            <exec executable="pdflatex" dir="@{dir}">
                <arg value="-shell-escape" />
                <!-- <arg value="-interaction=nonstopmode" /> -->
                <arg value="-interaction=batchmode" />
                <arg value="${draftarg}" />
                <arg value="-jobname=@{version}" />
                <arg value="-output-directory=@{outputdir}" />

                <!-- <arg value="&quot;${localearg}\input{@{document}}&quot;" /> -->

                <arg value="${documentclass}\renewcommand\documentclass[2][]{}\usepackage{tikz}\usetikzlibrary{external}\tikzset{external/system call={pdflatex \tikzexternalcheckshellescape -halt-on-error -interaction=batchmode -jobname \&quot;\image\&quot; \&quot;\string\def\string\tikzexternalrealjob{@{document}}\string${documentclass}\string\renewcommand\string\documentclass[2][]{}\string\input{@{document}}\&quot;}}${localecmd}\input{@{document}}" />

                <!--
                    System call for handout version:

                    \documentclass[handout]{beamer}
                    \renewcommand\documentclass[2][]{}

                    \usepackage{tikz}
                    \usetikzlibrary{external}
                    \tikzset{external/system call={pdflatex \tikzexternalcheckshellescape -halt-on-error -interaction=batchmode -jobname "\image" "\string\def\string\tikzexternalrealjob{presentation}\string\documentclass[handout]{beamer}\string\renewcommand\string\documentclass[2][]{}\string\input{presentation}"}}

                    \newcommand\locale{en}
                    \input{presentation}
                -->
            </exec>
        </sequential>
    </macrodef>

    <!-- Targets -->

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp />

        <!-- Verify existence of build directory -->
        <mkdir dir="${build}"/>

        <!-- Verify existence of cache directories -->
        <mkdir dir="${beamer.cache}"/>
        <mkdir dir="${handout.cache}"/>
        <mkdir dir="${article.cache}"/>
    </target>

    <target name="build" depends="init,-build.conditions,-build.beamer,-build.handout">
        <!-- TODO propperty for enabling/disabling beamer,handout or article -->
        <!-- TODO further calls of other targets depending on enable property -->
    </target>

    <target name="-build.conditions">
        <!-- Is the beamer version enabled? -->
        <condition property="beamer.is.enabled">
            <equals arg1="beamer.is.enabled" arg2="true" />
        </condition>

        <!-- Is the handout version enabled? -->
        <condition property="handout.is.enabled">
            <equals arg1="handout.is.enabled" arg2="true" />
        </condition>
    </target>

    <target name="-build.beamer" depends="build-beamer" if="beamer.is.enabled">

    </target>

    <target name="-build.handout" depends="build-handout" if="handout.is.enabled">

    </target>

    <target name="build-beamer" depends="init" description="compile the beamer version of the presentation">
        <compilepdf document="${presentation.source}" dir="${basedir}" />
    </target>

    <target name="draft-beamer" depends="init">
        <compilepdf document="${presentation.source}" dir="${basedir}" draft="true" />
    </target>

    <target name="build-handout" depends="init" description="compile the handout version of the presentation">
        <compilepdf document="${presentation.source}" dir="${basedir}" version="handout" />
    </target>

    <target name="draft-handout" depends="init">
        <compilepdf document="${presentation.source}" dir="${basedir}" version="handout" draft="true" />
    </target>

    <target name="build-article" depends="init" description="compile the article version of the presentation">
        <!-- TODO -->
    </target>

    <target name="draft-article" depends="init">
        <!-- TODO only a single run without moving to build -->
    </target>

    <target name="clean" depends="init" description="clean up">
        <!-- Delete all files created during the LaTeX build process -->
        <delete>
            <fileset dir="${build}" includes="*.aux,*.auxlock,*.gz,*.log,*.nav,*.out,*.snm,*.toc"/>
        </delete>

        <!-- Clean the cache -->
        <!-- TODO -->
    </target>

    <target name="clean-cache" depends="init">
        <delete>
            <fileset dir="${beamer.cache}" includes="*" />
            <fileset dir="${handout.cache}" includes="*" />
            <fileset dir="${article.cache}" includes="*" />
        </delete>
    </target>
</project>