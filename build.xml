<project name="beamertemplate" default="build" basedir=".">
    <description>Build process definition for beamer templates.</description>

    <!-- Load properties file -->
    <property file="build.properties"/>

    <!-- Define paths using in build process -->
    <property name="build.folder" location="build" />
    <property name="dist.folder"  location="dist" />
    <property name="docs.folder"  location="docs" />
    <property name="src.folder" location="src" />
    <property name="test.folder"  location="test" />

    <!-- Macros -->

    <!-- Compiles a document using the selected language -->
    <macrodef name="compilepdf">
        <attribute name="dir" />
        <attribute name="document" />
        <attribute name="locale" default="" />
        <attribute name="draft" default="false" />

        <sequential>
            <local name="inputarg"/>
            <condition property="inputarg" value="@{document}" else="&quot;\providecommand\locale{@{locale}}\input{@{document}}&quot;">
                <equals arg1="@{locale}" arg2="" />
            </condition>

            <local name="draftmodearg"/>
            <condition property="draftmodearg" value="-draftmode" else="">
                <equals arg1="@{draft}" arg2="true" />
            </condition>

            <!-- Compile document using pdflatex -->
            <exec executable="pdflatex" dir="@{dir}"> <!-- failonerror="true" -->
                <arg value="-shell-escape" />
                <!-- <arg value="-synctex=1" /> -->
                <arg value="-interaction=nonstopmode" />
                <!-- <arg value="-interaction=batchmode" /> -->
                <arg value="${draftmodearg}" />
                <arg value="${inputarg}"/>
            </exec>
            <!-- TODO redirect pipe and filter by errors and warnings -->
        </sequential>
    </macrodef>

    <!-- Compiles the documentation using the selected language -->
    <macrodef name="compiledocs">
        <attribute name="locale" />

        <sequential>
            <compilepdf document="${docs.source}.tex" dir="${docs.folder}" locale="@{locale}" />
        </sequential>
    </macrodef>

    <!-- Clean a directory from temporary build files -->
    <macrodef name="cleanlatex">
        <attribute name="dir" />

        <sequential>
            <delete>
                <fileset dir="@{dir}" includes="*.aux,*.auxlock,*.gz,*.log,*.nav,*.out,*.pdf,*.snm,*.toc"/>
            </delete>
        </sequential>
    </macrodef>

    <!-- Targets -->

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp />
    </target>

    <target name="init-build" depends="init">
        <!-- Create the build directory -->
        <mkdir dir="${build.folder}"/>
    </target>

    <target name="build" depends="init,init-build" description="compiles the source">
        <!-- Concat source files into a single style -->
        <concat destfile="${build.folder}/${build.name}.sty" overwrite="true">
            <!-- Define list of source files in correct order -->
            <filelist dir="${src.folder}" files="${src.include}" />
        </concat>

        <!-- Copy style to test directory -->
        <copy file="${build.folder}/${build.name}.sty" todir="${test.folder}" overwrite="true" />
    </target>

    <target name="build-docs" depends="init,init-build" description="generates the documentation">
        <!-- Compile documentation with locale en -->
        <compilepdf document="${docs.source}.tex" dir="${docs.folder}" locale="en" draft="true" />
        <compilepdf document="${docs.source}.tex" dir="${docs.folder}" locale="en" />
        <move file="${docs.folder}/${docs.source}.pdf" tofile="${build.folder}/${docs.name}-en.pdf" overwrite="true" />
        <cleanlatex dir="${docs.folder}" />

        <!-- Compile documentation with locale de -->
        <compilepdf document="${docs.source}.tex" dir="${docs.folder}" locale="de" draft="true" />
        <compilepdf document="${docs.source}.tex" dir="${docs.folder}" locale="de" />
        <move file="${docs.folder}/${docs.source}.pdf" tofile="${build.folder}/${docs.name}-de.pdf" overwrite="true" />
        <cleanlatex dir="${docs.folder}" />
    </target>

    <target name="build-test" depends="init,build" description="generates the test presentation">
        <!-- Compile test presentation -->
        <compilepdf document="presentation.tex" dir="${test.folder}" draft="true" />
        <compilepdf document="presentation.tex" dir="${test.folder}" />

        <copy file="${test.folder}/presentation.pdf" tofile="${build.folder}/presentation.pdf" overwrite="true" />

        <!-- Clean test directory -->
        <cleanlatex dir="${test.folder}" />

        <!-- TODO build handout -->
    </target>

    <target name="test-presentation" depends="init, build" description="generates the test presentation without copying it to the build directory">
        <!-- Compile test presentation (using test ant script) -->
        <compilepdf document="presentation.tex" dir="${test.folder}" />
    </target>

    <target name="test-docs-en" depends="init" description="generates the english documentation">
        <compiledocs locale="en" />
    </target>

    <target name="test-docs-de" depends="init" description="generates the german documentation">
        <compiledocs locale="de" />
    </target>

    <target name="init-dist">
        <!-- Create the distribution directory -->
        <mkdir dir="${dist.folder}"/>
    </target>

    <target name="dist" depends="init-dist,build,build-docs,build-test" description="generates the distribution">
        <!-- Clean the distribution directory -->
        <delete includeemptydirs="true">
            <fileset dir="${dist.folder}">
                <!-- <include name="**/*" /> -->
                <exclude name="*-dev.zip" />
            </fileset>
        </delete>

        <!-- Create the distribution directory structure -->
        <mkdir dir="${dist.folder}/template" />
        <mkdir dir="${dist.folder}/docs" />
        <mkdir dir="${dist.folder}/test" />

        <!-- Copy template contents -->
        <copy todir="${dist.folder}/template">
            <filelist dir="${build.folder}">
                <file name="${build.name}.sty" />
            </filelist>
        </copy>

        <!-- Copy docs contents -->
        <copy todir="${dist.folder}/docs">
            <fileset dir="${build.folder}">
                <include name="${docs.name}-*.pdf"/>
            </fileset>
        </copy>

        <!-- Copy test contents -->
        <copy todir="${dist.folder}/test">
            <filelist dir="${build.folder}" >
                <file name="${build.name}.sty" />
                <file name="presentation.pdf" />
            </filelist>

            <filelist dir="${test.folder}">
                <file name="presentation.tex" />
                <!-- <file name="build.xml" /> -->
            </filelist>

            <fileset dir="${test.folder}" includes="frames/**,images/**" />
        </copy>

        <!-- Create caching directories -->
        <mkdir dir="${dist.folder}/test/beamer-cache" />
        <mkdir dir="${dist.folder}/test/handout-cache" />
        <mkdir dir="${dist.folder}/test/article-cache" />

        <!-- Create distribution archive -->
        <zip destfile="${dist.folder}/${dist.name}.zip" level="9">
            <fileset dir="${dist.folder}" />
        </zip>
    </target>

    <target name="dist-dev" depends="init-dist" description="generates the development distribution">
        <!-- Create development distribution -->
        <!-- TODO -->
        <zip destfile="${dist.folder}/${dist.name}-dev.zip" level="9">
            <fileset dir="${basedir}" excludes="build,dist,**/*.aux,**/*.auxlock,**/*.gz,**/*.log,**/*.nav,**/*.out,**/*.snm,**/*.toc">
            </fileset>
        </zip>
    </target>

    <target name="clean" description="cleans build process paths" >
        <!-- Delete the build and distribution directories -->
        <delete dir="${build.folder}" />
        <delete dir="${dist.folder}" />

        <!-- Clean test directory -->
        <cleanlatex dir="${test.folder}" />
        <delete file="${test.folder}/${build.name}.sty" />

        <!-- Clean docs directory -->
        <cleanlatex dir="${docs.folder}" />
    </target>
</project>