<project name="pdflatex" default="build" basedir=".">
    <description>Build process definition for compiling documents and beamer presentations.</description>

    <!-- Load properties file -->
    <property file="build.properties"/>

    <!-- Set paths using in build process -->
    <property name="build" location="build" />

    <!-- Set cache paths -->
    <property name="document.cache" location="${beamer.cache}" />
    <property name="beamer.cache" location="${beamer.cache}" />
    <property name="handout.cache" location="${handout.cache}" />
    <property name="article.cache" location="${article.cache}" />

    <!-- Compiles a document using pdflatex -->
    <scriptdef name="compilepdf" language="javascript">
        <attribute name="dir" />
        <attribute name="document" />
        <attribute name="outputdir" />
        <attribute name="version" />
        <attribute name="locale" />
        <attribute name="draft" />
        <attribute name="tikzcompatibility" />
        <![CDATA[
            // Extensions
            String.prototype.trim = function() {
                return String(this).replace(/^\s+|\s+$/g, "");
            };

            // Fetch attributes
            var dir = new java.io.File(attributes.get("dir"));
            var document = attributes.get("document");
            var outputdir = attributes.get("outputdir");
            var version = attributes.get("version");
            var locale = attributes.get("locale");
            var draft = attributes.get("draft") == "true" ? true : false;
            var tikzcompatibility = attributes.get("tikzcompatibility") == "true" ? true : false;

            // Default output dir
            if (outputdir == null) {
                outputdir = "build";
            }

            // Default version
            if (version == null) {
                version = "document";
            }

            // Create string for preamble
            var preamble = "";

            // Document class
            if (version == "beamer") {
                // Beamer
                var documentclass = "\\documentclass{beamer}";
            }
            else if (version == "handout") {
                // Handout
                var documentclass = "\\documentclass[handout]{beamer}";
            }
            else if (version == "article") {
                // Article
                var documentclass = "\\documentclass{article}";
                documentclass += "\\usepackage{beamerarticle}";
            }

            if (version != "document") {
                // Add document class to preamble
                preamble += documentclass;

                // Replace document class
                preamble += "\\renewcommand\\documentclass[2][]{}";
            }

            // TikZ externalize compatibility
            if (tikzcompatibility) {
                preamble += "\\usepackage{tikz}";
                preamble += "\\usetikzlibrary{external}";
                preamble += "\\tikzset{external/system call={pdflatex \\tikzexternalcheckshellescape -halt-on-error -interaction=batchmode -jobname \"\\image\" \"\\string\\def\\string\\tikzexternalrealjob{" + document + "}\\string" + documentclass + "\\string\\renewcommand\\string\\documentclass[2][]{}\\string\\input{" + document + "}\"}}";
            }

            // Locale
            if (locale != null) {
                preamble += "\newcommand\locale{" + locale + "}";
            }

            // Set input document
            preamble += "\\input{" + document + "}";

            // Construct execution task
            var exec = project.createTask("exec");
            exec.setExecutable("pdflatex");
            exec.setOutputproperty("pdflatex.out");
            exec.setErrorProperty("pdflatex.err");
            exec.setInputString(preamble);

            // TODO suppress output from exec task
            //exec.setOutput(new java.io.File("out.log"));

            // Set working directory
            if (dir != null) {
                exec.setDir(dir);
            }

            // Append arguments
            exec.createArg().setValue("-shell-escape");
            exec.createArg().setValue("-interaction=nonstopmode");
            exec.createArg().setValue("-jobname=" + version);
            exec.createArg().setValue("-output-directory=" + outputdir);

            if (draft) {
                exec.createArg().setValue("-draftmode");
            }

            // Execute pdflatex
            exec.perform();

            // Get output and error stream
            var out = project.getProperty("pdflatex.out");
            var err = project.getProperty("pdflatex.err");

            // Filter errors and warnings
            var issues = [];
            out_lines = out.replace("\r\n", "\n").split("\n");

            for (var i = 0; i < out_lines.length; i++) {
                var out_line = out_lines[i];

                // Capture error
                if (out_line.substr(0, 1) == "!") {
                    var error = out_line.substr(2);

                    // Append subsequent line
                    error += " " + out_lines[i + 1];
                    i += 1;

                    // Append error to list
                    issues.push("Error: " + error);
                }
                // Capture warning
                else if (out_line.substr(0, 13) == "LaTeX Warning") {
                    var warning = out_line.substr(15);

                    // Append warning to list
                    issues.push("Warning: " + warning);
                }
            }

            // Display errors and warnings
            for (var issue in issues) {
                self.log(issues[issue]);
            }
        ]]>
    </scriptdef>

    <!-- Targets -->

    <target name="init">
        <!-- Create the time stamp -->
        <tstamp />

        <!-- Verify existence of build directory -->
        <mkdir dir="${build}"/>
    </target>

    <target name="build" depends="init,-build.conditions,-build-document,-build-beamer,-build-handout,-build-article">

    </target>

    <target name="-build.conditions">
        <scriptdef language="javascript">
            <![CDATA[
                // Is the document version enabled?
                if (project.getProperty("document.enabled") == "true") {
                    project.setProperty("document.is-enabled", "true");
                }

                // Is the beamer version enabled?
                if (project.getProperty("beamer.enabled") == "true") {
                    project.setProperty("beamer.is-enabled", "true");
                }

                // Is the handout version enabled?
                if (project.getProperty("handout.enabled") == "true") {
                    project.setProperty("handout.is-enabled", "true");
                }

                // Is the article version enabled?
                if (project.getProperty("article.enabled") == "true") {
                    project.setProperty("article.is-enabled", "true");
                }
            ]]>
        </scriptdef>
    </target>

    <target name="-build-document" depends="build-document" if="document.is-enabled">

    </target>

    <target name="-build-beamer" depends="build-beamer" if="beamer.is-enabled">

    </target>

    <target name="-build-handout" depends="build-handout" if="handout.is-enabled">

    </target>

    <target name="-build-article" depends="build-article" if="article.is-enabled">

    </target>

    <target name="-init-document">
        <mkdir dir="${document.cache}"/>
    </target>

    <target name="build-document" depends="init,-init-document" description="compile the document">
        <compilepdf document="${document.source}" dir="${basedir}" tikzcompatibility="false" />
    </target>

    <target name="-init-beamer">
        <mkdir dir="${beamer.cache}"/>
    </target>

    <target name="build-beamer" depends="init,-init-beamer" description="compile the beamer version of the presentation">
        <compilepdf document="${presentation.source}" dir="${basedir}" version="beamer" tikzcompatibility="true" />
    </target>

    <target name="-init-handout">
        <mkdir dir="${handout.cache}"/>
    </target>

    <target name="build-handout" depends="init,-init-handout" description="compile the handout version of the presentation">
        <compilepdf document="${presentation.source}" dir="${basedir}" version="handout" />
    </target>

    <target name="-init-article">
        <mkdir dir="${article.cache}"/>
    </target>

    <target name="build-article" depends="init,-init-article" description="compile the article version of the presentation">
        <compilepdf document="${presentation.source}" dir="${basedir}" version="article" />
    </target>

    <target name="clean" depends="init" description="clean up">
        <!-- Delete all files created during the LaTeX build process -->
        <delete>
            <fileset dir="${build}" includes="*.aux,*.auxlock,*.gz,*.log,*.nav,*.out,*.snm,*.toc"/>
        </delete>
    </target>

    <target name="clean-cache" depends="init" description="">
        <delete>
            <fileset dir="${beamer.cache}" includes="*" />
            <fileset dir="${handout.cache}" includes="*" />
            <fileset dir="${article.cache}" includes="*" />
        </delete>
    </target>
</project>